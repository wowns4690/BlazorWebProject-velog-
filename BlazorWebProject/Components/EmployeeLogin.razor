@using BlazorWebProject.Model
@using BlazorWebProject.Service
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService service
@inject IJSRuntime JsRuntime
@inject NavigationManager nav

<div class="form-group">
    <input type="text" class="form-control form-control-user" @bind-value="empLogin.Id" placeholder="아이디를 입력해주세요." maxlength="12">
</div>
<hr />
<div class="form-group">
    <input type="password" class="form-control form-control-user" @bind-value="empLogin.Password" placeholder="비밀번호를 입력해주세요." maxlength="12">
</div>
<hr />
<button class="btn btn-primary" @onclick="@(async () => await LoginCheck())">로그인</button>

@* <button class="btn btn-danger" @onclick="Register">회원가입</button> *@

<div class="modal" id="registerModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">회원가입</h5>
            </div>
            <div class="modal-body">
                <EmployeeAdd></EmployeeAdd>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseModal">닫기</button>
            </div>
        </div>
    </div>
</div>
<script src="/JavaScript.js"></script>
@code {

    private EmployeeModel emp = new();
    private EmployeeLoginModel empLogin = new();

    [Parameter]
    public bool ShowModal { get; set; }

    [Parameter]
    public EventCallback<bool> ShowModalChanged { get; set; }

    private async Task LoginCheck()
    {
        if (string.IsNullOrEmpty(empLogin.Id) || string.IsNullOrEmpty(empLogin.Password))
        {
            var errorString = string.IsNullOrEmpty(empLogin.Id) ? "아이디를 입력해주세요." : "비밀번호를 입력해주세요.";

            await JsRuntime.InvokeVoidAsync("alert", errorString);

            return;
        }

        await Login();
    }

    private async Task Login()
    {
        var myCookieValue = await service.Login(empLogin);
        if (string.IsNullOrEmpty(myCookieValue))
        {
            await JsRuntime.InvokeVoidAsync("alert", "등록되지 않은 회원입니다.");
            return;
        }

        await WriteCookies(myCookieValue);
        nav.NavigateTo(nav.Uri, forceLoad: true);
    }

    protected async Task WriteCookies(string myCookieValue)
    {
        await JsRuntime.InvokeAsync<object>("WriteCookie.WriteCookie", "auth", myCookieValue, DateTime.Now.AddMinutes(30));
    }

    private async Task Register()
    {
        await JsRuntime.InvokeVoidAsync("Blazor.showModal", "registerModal");
    }

    private async Task CloseModal()
    {
        ShowModal = false;
        await ShowModalChanged.InvokeAsync(false);
    }
}
